#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

// Joystick pins
#define JOY_X A0
#define JOY_Y A1
#define BUZZER_PIN 2
#define SNAKE_MAX_LENGTH 12

// Joystick deadzone and thresholds
#define JOYSTICK_DEADZONE 100
#define JOYSTICK_HIGH_THRESHOLD 800
#define JOYSTICK_LOW_THRESHOLD 200

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Menu variables
int selected = 0;
int entered = -1;
bool btnPressed = false;
unsigned long lastInputTime = 0;
const unsigned long INPUT_DELAY = 150;

// Snake game variables
int snake_x[SNAKE_MAX_LENGTH];
int snake_y[SNAKE_MAX_LENGTH];
int snake_length = 2;
int score = 0;
int snake_dir = 0;  // 0=right, 1=up, 2=left, 3=down
int food_x;
int food_y;
bool gameActive = false;
unsigned long stopwatchStart = 0;
bool stopwatchRunning = false;

// Input handling structure
struct JoystickState {
    int x;
    int y;
    bool changed;
};

// Helper function to read and process joystick values consistently
JoystickState getProcessedJoystickState() {
    JoystickState state;
    // For 90-degree rotated joystick:
    // Original X becomes Y, Original Y becomes X (inverted)
    int rawY = analogRead(JOY_X);  // Read original X as Y
    int rawX = analogRead(JOY_Y);  // Read original Y as X
    
    // Process and normalize the values
    state.x = rawX;
    state.y = 1023 - rawY;  // Invert Y axis
    
    // Check if enough time has passed for a new input
    unsigned long currentTime = millis();
    state.changed = (currentTime - lastInputTime >= INPUT_DELAY);
    if (state.changed) {
        lastInputTime = currentTime;
    }
    
    return state;
}

void drawSnake() {
    for (int i = 0; i < snake_length; i++) {
        display.fillRect(snake_x[i] * 8, snake_y[i] * 8, 8, 8, SSD1306_WHITE);
    }
}

void drawFood() {
    display.fillRect(food_x * 8, food_y * 8, 8, 8, SSD1306_WHITE);
}

void gameOver() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(5, 20);
    display.println("The snake died!");
    display.setCursor(15, 40);
    display.print("Score: ");
    display.println(score);
    display.display();
    delay(3000);
    gameActive = false;
    entered = -1;
}

void Reset() {
    score = 0;
    food_x = random(0, display.width() / 8);
    food_y = random(0, display.height() / 8);
    snake_length = 2;
    snake_dir = 0;
    snake_x[0] = 0;
    snake_y[0] = 0;
    snake_x[1] = 1;
    snake_y[1] = 0;
}

void initSnakeGame() {
    gameActive = true;
    Reset();
}

void updateSnakeGame() {
    delay(80);
    
    JoystickState joy = getProcessedJoystickState();
    
    // Update direction based on joystick position
    if (joy.x > JOYSTICK_HIGH_THRESHOLD && snake_dir != 0) snake_dir = 2;        // Right
    else if (joy.x < JOYSTICK_LOW_THRESHOLD && snake_dir != 2) snake_dir = 0;    // Left
    else if (joy.y > JOYSTICK_HIGH_THRESHOLD && snake_dir != 3) snake_dir = 1;   // Up
    else if (joy.y < JOYSTICK_LOW_THRESHOLD && snake_dir != 1) snake_dir = 3;    // Down
    
    // Update snake position
    for (int i = snake_length - 1; i > 0; i--) {
        snake_x[i] = snake_x[i - 1];
        snake_y[i] = snake_y[i - 1];
    }

    // Move snake head based on direction
    switch (snake_dir) {
        case 0: snake_x[0]++; break;  // Right
        case 1: snake_y[0]--; break;  // Up
        case 2: snake_x[0]--; break;  // Left
        case 3: snake_y[0]++; break;  // Down
    }

    // Handle screen wrapping
    if (snake_x[0] < 0) snake_x[0] = display.width() / 8 - 1;
    else if (snake_x[0] >= display.width() / 8) snake_x[0] = 0;
    if (snake_y[0] < 0) snake_y[0] = display.height() / 8 - 1;
    else if (snake_y[0] >= display.height() / 8) snake_y[0] = 0;

    // Check for food collision
    if (snake_x[0] == food_x && snake_y[0] == food_y) {
        if (snake_length < SNAKE_MAX_LENGTH) snake_length++;
        score++;
        digitalWrite(BUZZER_PIN, HIGH);
        delay(10);
        digitalWrite(BUZZER_PIN, LOW);
        food_x = random(0, display.width() / 8);
        food_y = random(0, display.height() / 8);
    }

    // Check for self collision
    for (int i = 1; i < snake_length; i++) {
        if (snake_x[0] == snake_x[i] && snake_y[0] == snake_y[i]) {
            gameOver();
            return;
        }
    }

    // Update display
    display.clearDisplay();
    drawSnake();
    drawFood();
    display.display();
}
void updateStopwatch() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("Stopwatch");
    
    unsigned long elapsed = stopwatchRunning ? (millis() - stopwatchStart) : 0;
    int hours = elapsed / 3600000;
    int mins = (elapsed % 3600000) / 60000;
    int secs = (elapsed % 60000) / 1000;
    //int ms = elapsed % 1000;
    
    display.setTextSize(2);
    display.setCursor(10, 20);
    char timeStr[20];
    sprintf(timeStr, "%02d:%02d:%02d", hours, mins, secs);
    display.print(timeStr);
    
    display.setTextSize(1);
    display.setCursor(0, 50);
    display.print("Press UP to ");
    display.print(stopwatchRunning ? "Stop" : "Start");
    display.display();
    
    JoystickState joy = getProcessedJoystickState();
    if (joy.changed && joy.y > JOYSTICK_HIGH_THRESHOLD) {
        if (!stopwatchRunning) {
            stopwatchStart = millis();
            stopwatchRunning = true;
        } else {
            stopwatchRunning = false;
        }
    }
}
void handleMenuInput(JoystickState joy) {
    if (!joy.changed) return;
    
    // Menu navigation
    if (joy.y > JOYSTICK_HIGH_THRESHOLD && !btnPressed) {
        selected = max(0, selected - 1);
        btnPressed = true;
    }
    else if (joy.y < JOYSTICK_LOW_THRESHOLD && !btnPressed) {
        selected = min(6, selected + 1);
        btnPressed = true;
    }
    else if (joy.y >= JOYSTICK_LOW_THRESHOLD && joy.y <= JOYSTICK_HIGH_THRESHOLD) {
        btnPressed = false;
    }

    // Menu selection
    if (joy.x < JOYSTICK_LOW_THRESHOLD && entered != -1) {
        entered = -1;
        gameActive = false;
        stopwatchRunning = false;
//        timerRunning = false;
    }
    else if (joy.x > JOYSTICK_HIGH_THRESHOLD && entered == -1) {
        entered = selected;
        if (entered == 0) {
            initSnakeGame();
        }
    }
}

void displaymenu() {
    JoystickState joy = getProcessedJoystickState();
    
    if (gameActive && entered == 0) {
        updateSnakeGame();
        return;
    }
    
    handleMenuInput(joy);

    const char *options[12] = {
        " Snake Game",
        " Stop Watch",
        " Distance",
        " About",
        " Contacts",
        " Notes",
        " ",
        " ",
        " ",
        " ",
        " ",
        " Torch"
    };

    if (entered == -1) {
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println(F("INPLACE V.10"));
        display.println("");
        for (int i = 0; i < 7; i++) {
            if (i == selected) {
                display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
            } else {
                display.setTextColor(SSD1306_WHITE);
            }
            display.println(options[i]);
        }
        display.display();
    } 
    else if (entered == 0 && gameActive) {
        updateSnakeGame();
    }
    else if (entered == 1) {//Stop watch
//        display.clearDisplay();
//        display.setTextSize(1);
//        display.setTextColor(SSD1306_WHITE);
//        display.setCursor(0, 0);  
//        display.println("Stop Watch");
//        display.display();
          updateStopwatch();
    }
    else if (entered == 2) { //distance
        display.clearDisplay();
        display.setTextSize(2);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println("INPLACE");
        display.setTextSize(1);
        display.println("currently disabled");
        display.display();
    }
    else if (entered == 3) { //about
        display.clearDisplay();
        display.setTextSize(2);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println("INPLACE");
        display.setTextSize(1);
        display.println("This is a device thatis made to replace   the phone. INPLACE iscapable of handling  the basic features.  Copyright Disclaminar");
        display.display();
    }
    else if (entered == 4) { //contacts
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println("dad 9916114182");
        display.println("mom 9742452255");
        display.println("");
        display.println("");
        display.println("");
        display.println("");
        display.display();
    }
    else if (entered == 5) { // notes
        display.clearDisplay();
        display.setTextSize(2);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println("INPLACE");
        display.setTextSize(1);
        display.println(" this is the motes page here you can store multiple notes");
        display.display();
    }
}

void setup() {
    pinMode(BUZZER_PIN, OUTPUT);
    
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        for(;;);
    }
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 2);
    display.println(" INPLACE ");
    display.display();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(20, 30);
    display.println("  ^_^");
    display.display();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 55);
    display.println("  By SIDDHARTHAN");
    display.display();
    delay(2500);
}

void loop() {
    displaymenu();
}

